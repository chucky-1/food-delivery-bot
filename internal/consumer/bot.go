package consumer

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/chucky-1/food-delivery-bot/internal/model"
	"github.com/chucky-1/food-delivery-bot/internal/service"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
)

const (
	start    = "start"
	register = "register"

	createOrganization = "create"
	joinOrganization   = "join"
	addAddress         = "address"

	menu         = "menu"
	goBackToMenu = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
	confirmOrder = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"
	clearOrder   = "–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑"
	cancelOrder  = "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
)

var (
	welcomeMessage = "üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞—Ñ–µ ¬´–ö—Ä–∏–ø—Ç–∞¬ª! üçΩ\n\n" +
		"–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º –∫–∞—Ñ–µ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –≤–∫—É—Å–Ω—ã–º–∏ –æ–±–µ–¥–∞–º–∏, –Ω–µ –ø–æ–∫–∏–¥–∞—è –∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ—Ñ–∏—Å–∞.\n\n" +
		"–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n" +
		"ü•ó –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –æ–±–µ–¥–æ–≤ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å ‚Äì –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –±–ª—é–¥ –¥–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏–∑—ã—Å–∫–æ–≤.\n" +
		"üöÄ –ë—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä—è–º–æ –∫ –≤–∞–º, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Å–≤–æ–∏–º –æ–±–µ–¥–æ–º –≤ –∫–æ–º—Ñ–æ—Ä—Ç–µ.\n" +
		"üåü –ö–∞—á–µ—Å—Ç–≤–æ –∏ —Å–≤–µ–∂–µ—Å—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Äì –º—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–∏ –æ—Ç –µ–¥—ã.\n" +
		"üìã –£–¥–æ–±–Ω—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ ‚Äì –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤, –∏ –≤–∞—à –æ–±–µ–¥ —É–∂–µ –≤ –ø—É—Ç–∏!\n\n" +
		"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –¥–æ–≤–æ–ª—å–Ω—ã!\n\n" +
		"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –æ–±–µ–¥ –æ—Å–æ–±–µ–Ω–Ω—ã–º.\n\n" +
		"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçΩüòä\n\n" +
		"/register"
	successfulRegistered = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! üéâ\n\n" +
		"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.\n\n" +
		"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
		"create –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 12:30\n\n" +
		"–ì–¥–µ 12:30 - —ç—Ç–æ –≤—Ä–µ–º—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –æ–±–µ–¥.\n\n" +
		"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
		"join 59efbd76\n\n" +
		"–ì–¥–µ 59efbd76 - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é."
	successfulOrganizationRegistered = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: %s\n\n" +
		"–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–µ–π, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (ID), –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø—Ä–∏—à–ª–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n" +
		"–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∞—Ç—å –≤ —Å–≤–æ—é –æ—Ä–≥–∞–Ω–∏–∑–∞—É—Ü–∏—é. –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–µ–π."
	successfulJoinOrganization   = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é! üéâ"
	successfulClearOrder         = "üòä –ú—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å—ë –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞"
	successfulConfirmOrder       = "üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—Å! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üòä"
	successfulCancelOrder        = "üòä –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑"
	userAlreadyHasConfirmedOrder = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ–¥–Ω–∞–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."
	addAddressMessage            = "üè¢ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –∞–¥—Ä–µ—Å –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏, –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—à–∏ –æ–±–µ–¥—ã. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
		"Address —É–ª. –¢–æ–ª–±—É—Ö–∏–Ω–∞ 18/2\n\n" +
		"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –ª—é–±–æ–π —Ñ–æ—Ä–º–µ –∏ –¥–∞–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–ª–∏, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. " +
		"–ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –∞–¥—Ä–µ—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–∞–º –ø–æ–¥–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."
	successfulAddAddress = "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∞–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!"
	menuRequest          = "üìã –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ú–µ–Ω—é\". –¢–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –±–ª—é–¥ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º!"
)

type Bot struct {
	bot         *tgbotapi.BotAPI
	updatesChan tgbotapi.UpdatesChannel
	auth        service.Auth
	org         service.Organization
	menu        service.Menu
	order       service.Order
	timezone    time.Duration
}

func NewBot(bot *tgbotapi.BotAPI, updatesChan tgbotapi.UpdatesChannel, auth service.Auth, org service.Organization,
	menu service.Menu, order service.Order, timezone time.Duration) *Bot {
	return &Bot{
		bot:         bot,
		updatesChan: updatesChan,
		auth:        auth,
		org:         org,
		menu:        menu,
		order:       order,
		timezone:    timezone,
	}
}

func (b *Bot) Consume(ctx context.Context) {
	logrus.Info("bot consumer started")
	for {
		select {
		case <-ctx.Done():
			logrus.Infof("bot consumer stopped: %s", ctx.Err().Error())
			return
		case update := <-b.updatesChan:
			if update.Message.IsCommand() {
				switch update.Message.Command() {
				case start:
					logrus.Debugf("start: %s %d", update.SentFrom().UserName, update.SentFrom().ID)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeMessage)
					_, err := b.bot.Send(msg)
					if err != nil {
						logrus.Error("start send: %s", err.Error())
						continue
					}
					continue
				case register:
					newCtx, cancel := context.WithTimeout(ctx, time.Minute)
					err := b.auth.Register(newCtx, &model.TelegramUser{
						ID:        update.SentFrom().ID,
						ChatID:    update.Message.Chat.ID,
						FirstName: update.SentFrom().FirstName,
					})
					if err != nil {
						logrus.Errorf("registerCommand: %s", err.Error())
						cancel()
						continue
					}
					cancel()
					logrus.Debugf("user registered: %s %d", update.SentFrom().UserName, update.SentFrom().ID)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, successfulRegistered)
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Error("register send: %s", err.Error())
						continue
					}
					continue
				case menu:
					err := b.sendMenu(ctx, update.SentFrom().ID, update.Message.Chat.ID)
					if err != nil {
						logrus.Errorf("sendMenu: %s", err.Error())
						continue
					}
					continue
				}
			} else {
				switch update.Message.Text {
				case model.Soups:
					err := b.sendDishes(ctx, update.SentFrom().ID, model.Soups, update.Message.Chat.ID)
					if err != nil {
						logrus.Errorf("sendDishes: %s", err.Error())
						continue
					}
					continue
				case model.Salads:
					err := b.sendDishes(ctx, update.SentFrom().ID, model.Salads, update.Message.Chat.ID)
					if err != nil {
						logrus.Errorf("sendDishes: %s", err.Error())
						continue
					}
					continue
				case model.MainCourse:
					err := b.sendDishes(ctx, update.SentFrom().ID, model.MainCourse, update.Message.Chat.ID)
					if err != nil {
						logrus.Errorf("sendDishes: %s", err.Error())
						continue
					}
					continue
				case model.Desserts:
					err := b.sendDishes(ctx, update.SentFrom().ID, model.Desserts, update.Message.Chat.ID)
					if err != nil {
						logrus.Errorf("sendDishes: %s", err.Error())
						continue
					}
					continue
				case model.Drinks:
					err := b.sendDishes(ctx, update.SentFrom().ID, model.Drinks, update.Message.Chat.ID)
					if err != nil {
						logrus.Errorf("sendDishes: %s", err.Error())
						continue
					}
					continue
				case goBackToMenu, "–ú–µ–Ω—é":
					err := b.sendMenu(ctx, update.SentFrom().ID, update.Message.Chat.ID)
					if err != nil {
						logrus.Errorf("sendMenu: %s", err.Error())
						continue
					}
					continue
				case clearOrder:
					newCtx, cancel := context.WithTimeout(ctx, time.Minute)
					err := b.order.ClearOrdersByUser(newCtx, update.SentFrom().ID, time.Now().UTC().Add(b.timezone))
					if err != nil {
						cancel()
						logrus.Errorf("clearOrders: %s", err.Error())
						continue
					}

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, successfulClearOrder)
					msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
					_, err = b.bot.Send(msg)
					if err != nil {
						cancel()
						logrus.Errorf("clearOrder: send: %s", err.Error())
					}

					err = b.sendMenu(newCtx, update.SentFrom().ID, update.Message.Chat.ID)
					if err != nil {
						cancel()
						logrus.Errorf("clearOrder: %s", err.Error())
					}
					cancel()
					continue
				case confirmOrder:
					newCtx, cancel := context.WithTimeout(ctx, time.Minute)
					err := b.order.ConfirmOrderByUser(newCtx, update.SentFrom().ID)
					if err != nil {
						logrus.Error(err.Error())
						cancel()
						continue
					}
					cancel()

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, successfulConfirmOrder)
					msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Errorf("confirmOrder: send: %s", err.Error())
						continue
					}
					continue
				case cancelOrder:
					newCtx, cancel := context.WithTimeout(ctx, time.Minute)
					err := b.order.ClearOrdersByUser(newCtx, update.SentFrom().ID, time.Now().UTC().Add(b.timezone))
					if err != nil {
						cancel()
						logrus.Error("cancelOrder: %w", err)
						continue
					}

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, successfulCancelOrder)
					_, err = b.bot.Send(msg)
					if err != nil {
						cancel()
						logrus.Errorf("cancelOrders: send: %s", err.Error())
					}

					err = b.sendMenu(newCtx, update.SentFrom().ID, update.Message.Chat.ID)
					if err != nil {
						cancel()
						logrus.Errorf("cancelOrder: %s", err.Error())
					}
					cancel()
					continue
				}

				newCtx, cancel := context.WithTimeout(ctx, time.Minute)
				dish, err := b.menu.GetDish(newCtx, update.Message.Text)
				if err != nil {
					logrus.Error(err.Error())
					cancel()
					continue
				}
				cancel()
				if dish != nil {
					err = b.addDishInOrder(ctx, dish, update.SentFrom().ID, update.Message.Chat.ID)
					if err != nil {
						logrus.Error(err.Error())
						continue
					}

					newCtx, cancel = context.WithTimeout(ctx, time.Minute)
					err = b.sendDishes(newCtx, update.SentFrom().ID, dish.Category, update.Message.Chat.ID)
					if err != nil {
						logrus.Error(err.Error())
						cancel()
						continue
					}
					cancel()
					continue
				}

				logrus.Debugf("consume: message: %s", update.Message.Text)
				split := strings.Split(update.Message.Text, " ")
				firstWord := strings.ToLower(split[0])
				logrus.Debugf("consume: firstWorld: %s", firstWord)
				messageWithoutFirstWord := strings.Join(split[len(split)-(len(split)-1):], " ")
				logrus.Debugf("consume: messageWithoutFirstWord: %s", messageWithoutFirstWord)
				switch firstWord {
				case createOrganization:
					// format message: create –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 12:30
					// 12:30 - lunchTime
					if len(strings.Split(messageWithoutFirstWord, " ")) < 2 {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É")
						_, err = b.bot.Send(msg)
						if err != nil {
							logrus.Errorf("createOrganization send: %s", err.Error())
							continue
						}
						continue
					}
					organization, userError := handleCreateOrganization(messageWithoutFirstWord)
					if userError != "" {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, userError)
						_, err = b.bot.Send(msg)
						if err != nil {
							logrus.Errorf("createOrganization send: %s", err.Error())
							continue
						}
						continue
					}

					userTelegramID := update.SentFrom().ID

					newCtx, cancel = context.WithTimeout(ctx, time.Minute)
					err = b.org.Add(newCtx, organization, userTelegramID)
					if err != nil {
						logrus.Errorf("createOrganization: %s", err.Error())
						cancel()
						continue
					}
					cancel()

					newCtx, cancel = context.WithTimeout(ctx, time.Minute)
					if err = b.org.Join(newCtx, organization.ID, userTelegramID); err != nil {
						logrus.Errorf("createOrganization: %s", err.Error())
						cancel()
						continue
					}
					cancel()

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(successfulOrganizationRegistered, organization.Name))
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Errorf("createOrganization: send: %s", err.Error())
						continue
					}

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, organization.ID.String())
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Errorf("createOrganization: send: %s", err.Error())
						continue
					}

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, addAddressMessage)
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Errorf("createOrganization: send: %s", err.Error())
						continue
					}

					continue
				case joinOrganization:
					uid, errParse := uuid.Parse(messageWithoutFirstWord)
					if errParse != nil {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É")
						_, errSend := b.bot.Send(msg)
						if errSend != nil {
							logrus.Errorf("joinOrganization send: %s", errSend.Error())
							continue
						}
						continue
					}

					newCtx, cancel = context.WithTimeout(ctx, time.Minute)
					if err = b.org.Join(newCtx, uid, update.SentFrom().ID); err != nil {
						logrus.Errorf("joinOrganization: %s", err.Error())
						cancel()
						continue
					}
					cancel()

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, successfulJoinOrganization)
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Errorf("joinOrganization send: %s", err.Error())
						continue
					}

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, menuRequest)
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Errorf("joinOrganization send: %s", err.Error())
						continue
					}

					continue
				case addAddress:
					newCtx, cancel = context.WithTimeout(ctx, time.Minute)
					err = b.org.UpdateAddress(newCtx, update.Message.Chat.ID, messageWithoutFirstWord)
					if err != nil {
						logrus.Errorf("addAddress: %s", err.Error())
						cancel()
						continue
					}
					cancel()

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, successfulAddAddress)
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Errorf("addAddress: %s", err.Error())
						continue
					}

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, menuRequest)
					_, err = b.bot.Send(msg)
					if err != nil {
						logrus.Errorf("joinOrganization send: %s", err.Error())
						continue
					}

					continue
				}
			}
		}
	}
}

func (b *Bot) sendMenu(ctx context.Context, userTelegramID, chatID int64) error {
	newCtx, cancel := context.WithTimeout(ctx, time.Minute)
	isUserHaveConfirmedOrder, err := b.order.IsUserHaveConfirmedOrder(newCtx, userTelegramID)
	if err != nil {
		cancel()
		return err
	}
	if isUserHaveConfirmedOrder {
		msg := tgbotapi.NewMessage(chatID, userAlreadyHasConfirmedOrder)
		var buttons [][]tgbotapi.KeyboardButton
		but := tgbotapi.NewKeyboardButton(cancelOrder)
		row := tgbotapi.NewKeyboardButtonRow(but)
		buttons = append(buttons, row)
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(buttons...)
		_, err = b.bot.Send(msg)
		if err != nil {
			cancel()
			return fmt.Errorf("send: %w", err)
		}
		cancel()
		return nil
	}

	categories, err := b.menu.GetAllCategories(newCtx)
	if err != nil {
		cancel()
		return err
	}

	msg := tgbotapi.NewMessage(chatID, "–ú–µ–Ω—é")
	var buttons [][]tgbotapi.KeyboardButton
	for _, category := range categories {
		but := tgbotapi.NewKeyboardButton(category)
		row := tgbotapi.NewKeyboardButtonRow(but)
		buttons = append(buttons, row)
	}

	exist, err := b.order.IsUserHaveAnyOrders(newCtx, userTelegramID)
	if err != nil {
		cancel()
		return err
	}
	cancel()
	if exist {
		but := tgbotapi.NewKeyboardButton(confirmOrder)
		row := tgbotapi.NewKeyboardButtonRow(but)
		buttons = append(buttons, row)

		but = tgbotapi.NewKeyboardButton(clearOrder)
		row = tgbotapi.NewKeyboardButtonRow(but)
		buttons = append(buttons, row)
	}

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(buttons...)
	_, err = b.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("send: %w", err)
	}
	return nil
}

func (b *Bot) sendDishes(ctx context.Context, userTelegramID int64, category string, chatID int64) error {
	newCtx, cancel := context.WithTimeout(ctx, time.Minute)
	dishes, err := b.menu.GetAllDishesByCategory(newCtx, category)
	if err != nil {
		cancel()
		return err
	}

	msg := tgbotapi.NewMessage(chatID, category)
	var buttons [][]tgbotapi.KeyboardButton
	for _, dish := range dishes {
		but := tgbotapi.NewKeyboardButton(dish.String())
		row := tgbotapi.NewKeyboardButtonRow(but)
		buttons = append(buttons, row)
	}
	but := tgbotapi.NewKeyboardButton(goBackToMenu)
	row := tgbotapi.NewKeyboardButtonRow(but)
	buttons = append(buttons, row)

	exist, err := b.order.IsUserHaveAnyOrders(newCtx, userTelegramID)
	if err != nil {
		cancel()
		return err
	}
	cancel()
	if exist {
		but = tgbotapi.NewKeyboardButton(confirmOrder)
		row = tgbotapi.NewKeyboardButtonRow(but)
		buttons = append(buttons, row)

		but = tgbotapi.NewKeyboardButton(clearOrder)
		row = tgbotapi.NewKeyboardButtonRow(but)
		buttons = append(buttons, row)
	}

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(buttons...)
	_, err = b.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("send: %w", err)
	}
	return nil
}

func (b *Bot) addDishInOrder(ctx context.Context, dish *model.Dish, userTelegramID int64, chatID int64) error {
	newCtx, cancel := context.WithTimeout(ctx, time.Minute)
	err := b.order.AddDish(newCtx, dish, userTelegramID)
	if err != nil {
		cancel()
		return fmt.Errorf("addDishInOrder: %w", err)
	}

	dishesByCategories, err := b.order.GetAllDishesByCategory(newCtx, userTelegramID)
	if err != nil {
		cancel()
		return fmt.Errorf("addDishInOrder: %w", err)
	}
	categories, err := b.menu.GetAllCategories(newCtx)
	if err != nil {
		cancel()
		return fmt.Errorf("addDishInOrder: %w", err)
	}
	cancel()

	var (
		message    = "–í–∞—à –∑–∞–∫–∞–∑:\n\n"
		totalPrice float32
	)
	for _, category := range categories {
		dishes, ok := dishesByCategories[category]
		if !ok {
			continue
		}
		for _, d := range dishes {
			message = fmt.Sprintf("%s%s\n", message, d.Name)
			totalPrice += d.Price
		}
	}
	message = fmt.Sprintf("%s\n–°—É–º–º–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: %.2f", message, totalPrice)
	msg := tgbotapi.NewMessage(chatID, message)
	_, err = b.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("send: %w", err)
	}
	return nil
}

func handleCreateOrganization(message string) (*model.Organization, string) {
	fields := strings.Fields(message)
	lunchTime := fields[len(fields)-1:]
	logrus.Debugf("handleCreateOrganization: luchTime: %s", lunchTime[0])
	splitLunchTime := strings.Split(lunchTime[0], ":")
	if len(splitLunchTime) != 2 {
		return nil, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Ä–µ–º—è –æ–±–µ–¥–∞"
	}
	hours, err := strconv.Atoi(splitLunchTime[0])
	if err != nil {
		return nil, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Ä–µ–º—è –æ–±–µ–¥–∞"
	}
	if hours > 23 {
		return nil, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Ä–µ–º—è –æ–±–µ–¥–∞. –ó–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 23"
	}
	minutes, err := strconv.Atoi(splitLunchTime[1])
	if err != nil {
		return nil, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Ä–µ–º—è –æ–±–µ–¥–∞"
	}
	if minutes > 59 {
		return nil, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Ä–µ–º—è –æ–±–µ–¥–∞. –ó–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 59"
	}
	logrus.Debugf("handleCreateOrganization: hours: %d, minutes: %d", hours, minutes)
	orgName := strings.Join(fields[:len(fields)-1], " ")
	logrus.Debugf("handleCreateOrganization: orgName: %s", orgName)
	return &model.Organization{
		ID:        uuid.New(),
		Name:      orgName,
		LunchTime: time.Duration(hours)*time.Hour + time.Duration(minutes)*time.Minute,
	}, ""
}
